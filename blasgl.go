package blasgl

import (
	"gonum.org/v1/gonum/blas"
	"gonum.org/v1/gonum/blas/gonum"
)

var gonumImpl = gonum.Implementation{}

// Implementation of the interface
type Implementation struct{}

// Sdsdot computes the dot product of the two vectors plus a constant
//  alpha + \sum_i x[i]*y[i]
//
// Float32 implementations are autogenerated and not directly tested.
// Sdsdot ...
func (i *Implementation) Sdsdot(n int, alpha float32, x []float32, incX int, y []float32, incY int) float32 {
	return gonumImpl.Sdsdot(n, alpha, x, incX, y, incY)
}

// Dsdot computes the dot product of the two vectors
//  \sum_i x[i]*y[i]
//
// Float32 implementations are autogenerated and not directly tested.
// Dsdot ...
func (i *Implementation) Dsdot(n int, x []float32, incX int, y []float32, incY int) float64 {
	return gonumImpl.Dsdot(n, x, incX, y, incY)
}

// Sdot ...
func (i *Implementation) Sdot(n int, x []float32, incX int, y []float32, incY int) float32 {
	return gonumImpl.Sdot(n, x, incX, y, incY)
}

// Snrm2 ...
func (i *Implementation) Snrm2(n int, x []float32, incX int) float32 {
	return gonumImpl.Snrm2(n, x, incX)
}

// Sasum ...
func (i *Implementation) Sasum(n int, x []float32, incX int) float32 {
	return gonumImpl.Sasum(n, x, incX)
}

// Isamax ...
func (i *Implementation) Isamax(n int, x []float32, incX int) int {
	return gonumImpl.Isamax(n, x, incX)
}

// Sswap ...
func (i *Implementation) Sswap(n int, x []float32, incX int, y []float32, incY int) {
	gonumImpl.Sswap(n, x, incX, y, incY)
}

// Scopy ...
func (i *Implementation) Scopy(n int, x []float32, incX int, y []float32, incY int) {
	gonumImpl.Scopy(n, x, incX, y, incY)
}

// Saxpy ...
func (i *Implementation) Saxpy(n int, alpha float32, x []float32, incX int, y []float32, incY int) {
	gonumImpl.Saxpy(n, alpha, x, incX, y, incY)
}

// Srotg ...
func (i *Implementation) Srotg(a float32, b float32) (c float32, s float32, r float32, z float32) {
	return gonumImpl.Srotg(a, b)
}

// Srotmg ...
func (i *Implementation) Srotmg(d1 float32, d2 float32, b1 float32, b2 float32) (p blas.SrotmParams, rd1 float32, rd2 float32, rb1 float32) {
	return gonumImpl.Srotmg(d1, d2, b1, b2)
}

// Srot ...
func (i *Implementation) Srot(n int, x []float32, incX int, y []float32, incY int, c float32, s float32) {
	gonumImpl.Srot(n, x, incX, y, incY, c, s)
}

// Srotm ...
func (i *Implementation) Srotm(n int, x []float32, incX int, y []float32, incY int, p blas.SrotmParams) {
	gonumImpl.Srotm(n, x, incX, y, incY, p)
}

// Sscal ...
func (i *Implementation) Sscal(n int, alpha float32, x []float32, incX int) {
	gonumImpl.Sscal(n, alpha, x, incX)
}

// Sgemv ...
func (i *Implementation) Sgemv(tA blas.Transpose, m int, n int, alpha float32, a []float32, lda int, x []float32, incX int, beta float32, y []float32, incY int) {
	gonumImpl.Sgemv(tA, m, n, alpha, a, lda, x, incX, beta, y, incY)
}

// Sgbmv ...
func (i *Implementation) Sgbmv(tA blas.Transpose, m int, n int, kL int, kU int, alpha float32, a []float32, lda int, x []float32, incX int, beta float32, y []float32, incY int) {
	gonumImpl.Sgbmv(tA, m, n, kL, kU, alpha, a, lda, x, incX, beta, y, incY)
}

// Strmv ...
func (i *Implementation) Strmv(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, a []float32, lda int, x []float32, incX int) {
	gonumImpl.Strmv(ul, tA, d, n, a, lda, x, incX)
}

// Stbmv ...
func (i *Implementation) Stbmv(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, k int, a []float32, lda int, x []float32, incX int) {
	gonumImpl.Stbmv(ul, tA, d, n, k, a, lda, x, incX)
}

// Stpmv ...
func (i *Implementation) Stpmv(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, ap []float32, x []float32, incX int) {
	gonumImpl.Stpmv(ul, tA, d, n, ap, x, incX)
}

// Strsv ...
func (i *Implementation) Strsv(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, a []float32, lda int, x []float32, incX int) {
	gonumImpl.Strsv(ul, tA, d, n, a, lda, x, incX)
}

// Stbsv ...
func (i *Implementation) Stbsv(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, k int, a []float32, lda int, x []float32, incX int) {
	gonumImpl.Stbsv(ul, tA, d, n, k, a, lda, x, incX)
}

// Stpsv ...
func (i *Implementation) Stpsv(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, ap []float32, x []float32, incX int) {
	gonumImpl.Stpsv(ul, tA, d, n, ap, x, incX)

}

// Ssymv ...
func (i *Implementation) Ssymv(ul blas.Uplo, n int, alpha float32, a []float32, lda int, x []float32, incX int, beta float32, y []float32, incY int) {
	gonumImpl.Ssymv(ul, n, alpha, a, lda, x, incX, beta, y, incY)

}

// Ssbmv ...
func (i *Implementation) Ssbmv(ul blas.Uplo, n int, k int, alpha float32, a []float32, lda int, x []float32, incX int, beta float32, y []float32, incY int) {
	gonumImpl.Ssbmv(ul, n, k, alpha, a, lda, x, incX, beta, y, incY)

}

// Sspmv ...
func (i *Implementation) Sspmv(ul blas.Uplo, n int, alpha float32, ap []float32, x []float32, incX int, beta float32, y []float32, incY int) {
	gonumImpl.Sspmv(ul, n, alpha, ap, x, incX, beta, y, incY)

}

// Sger ...
func (i *Implementation) Sger(m int, n int, alpha float32, x []float32, incX int, y []float32, incY int, a []float32, lda int) {
	gonumImpl.Sger(m, n, alpha, x, incX, y, incY, a, lda)

}

// Ssyr ...
func (i *Implementation) Ssyr(ul blas.Uplo, n int, alpha float32, x []float32, incX int, a []float32, lda int) {
	gonumImpl.Ssyr(ul, n, alpha, x, incX, a, lda)

}

// Sspr ...
func (i *Implementation) Sspr(ul blas.Uplo, n int, alpha float32, x []float32, incX int, ap []float32) {
	gonumImpl.Sspr(ul, n, alpha, x, incX, ap)

}

// Ssyr2 ...
func (i *Implementation) Ssyr2(ul blas.Uplo, n int, alpha float32, x []float32, incX int, y []float32, incY int, a []float32, lda int) {
	gonumImpl.Ssyr2(ul, n, alpha, x, incX, y, incY, a, lda)

}

// Sspr2 ...
func (i *Implementation) Sspr2(ul blas.Uplo, n int, alpha float32, x []float32, incX int, y []float32, incY int, a []float32) {
	gonumImpl.Sspr2(ul, n, alpha, x, incX, y, incY, a)

}

// Sgemm ...
func (i *Implementation) Sgemm(tA blas.Transpose, tB blas.Transpose, m int, n int, k int, alpha float32, a []float32, lda int, b []float32, ldb int, beta float32, c []float32, ldc int) {
	gonumImpl.Sgemm(tA, tB, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc)

}

// Ssymm ...
func (i *Implementation) Ssymm(s blas.Side, ul blas.Uplo, m int, n int, alpha float32, a []float32, lda int, b []float32, ldb int, beta float32, c []float32, ldc int) {
	gonumImpl.Ssymm(s, ul, m, n, alpha, a, lda, b, ldb, beta, c, ldc)

}

// Ssyrk ...
func (i *Implementation) Ssyrk(ul blas.Uplo, t blas.Transpose, n int, k int, alpha float32, a []float32, lda int, beta float32, c []float32, ldc int) {
	gonumImpl.Ssyrk(ul, t, n, k, alpha, a, lda, beta, c, ldc)

}

// Ssyr2k ...
func (i *Implementation) Ssyr2k(ul blas.Uplo, t blas.Transpose, n int, k int, alpha float32, a []float32, lda int, b []float32, ldb int, beta float32, c []float32, ldc int) {
	gonumImpl.Ssyr2k(ul, t, n, k, alpha, a, lda, b, ldb, beta, c, ldc)

}

// Strmm ...
func (i *Implementation) Strmm(s blas.Side, ul blas.Uplo, tA blas.Transpose, d blas.Diag, m int, n int, alpha float32, a []float32, lda int, b []float32, ldb int) {
	gonumImpl.Strmm(s, ul, tA, d, m, n, alpha, a, lda, b, ldb)

}

// Strsm ...
func (i *Implementation) Strsm(s blas.Side, ul blas.Uplo, tA blas.Transpose, d blas.Diag, m int, n int, alpha float32, a []float32, lda int, b []float32, ldb int) {
	gonumImpl.Strsm(s, ul, tA, d, m, n, alpha, a, lda, b, ldb)

}

// Ddot ...
func (i *Implementation) Ddot(n int, x []float64, incX int, y []float64, incY int) float64 {
	return gonumImpl.Ddot(n, x, incX, y, incY)

}

// Dnrm2 ...
func (i *Implementation) Dnrm2(n int, x []float64, incX int) float64 {
	return gonumImpl.Dnrm2(n, x, incX)

}

// Dasum ...
func (i *Implementation) Dasum(n int, x []float64, incX int) float64 {
	return gonumImpl.Dasum(n, x, incX)

}

// Idamax ...
func (i *Implementation) Idamax(n int, x []float64, incX int) int {
	return gonumImpl.Idamax(n, x, incX)

}

// Dswap ...
func (i *Implementation) Dswap(n int, x []float64, incX int, y []float64, incY int) {
	gonumImpl.Dswap(n, x, incX, y, incY)

}

// Dcopy ...
func (i *Implementation) Dcopy(n int, x []float64, incX int, y []float64, incY int) {
	gonumImpl.Dcopy(n, x, incX, y, incY)

}

// Daxpy ...
func (i *Implementation) Daxpy(n int, alpha float64, x []float64, incX int, y []float64, incY int) {
	gonumImpl.Daxpy(n, alpha, x, incX, y, incY)

}

// Drotg ...
func (i *Implementation) Drotg(a float64, b float64) (c float64, s float64, r float64, z float64) {
	return gonumImpl.Drotg(a, b)

}

// Drotmg ...
func (i *Implementation) Drotmg(d1 float64, d2 float64, b1 float64, b2 float64) (p blas.DrotmParams, rd1 float64, rd2 float64, rb1 float64) {
	return gonumImpl.Drotmg(d1, d2, b1, b2)

}

// Drot ...
func (i *Implementation) Drot(n int, x []float64, incX int, y []float64, incY int, c float64, s float64) {
	gonumImpl.Drot(n, x, incX, y, incY, c, s)

}

// Drotm ...
func (i *Implementation) Drotm(n int, x []float64, incX int, y []float64, incY int, p blas.DrotmParams) {
	gonumImpl.Drotm(n, x, incX, y, incY, p)

}

// Dscal ...
func (i *Implementation) Dscal(n int, alpha float64, x []float64, incX int) {
	gonumImpl.Dscal(n, alpha, x, incX)

}

// Dgemv ...
func (i *Implementation) Dgemv(tA blas.Transpose, m int, n int, alpha float64, a []float64, lda int, x []float64, incX int, beta float64, y []float64, incY int) {
	gonumImpl.Dgemv(tA, m, n, alpha, a, lda, x, incX, beta, y, incY)

}

// Dgbmv ...
func (i *Implementation) Dgbmv(tA blas.Transpose, m int, n int, kL int, kU int, alpha float64, a []float64, lda int, x []float64, incX int, beta float64, y []float64, incY int) {
	gonumImpl.Dgbmv(tA, m, n, kL, kU, alpha, a, lda, x, incX, beta, y, incY)

}

// Dtrmv ...
func (i *Implementation) Dtrmv(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, a []float64, lda int, x []float64, incX int) {
	gonumImpl.Dtrmv(ul, tA, d, n, a, lda, x, incX)

}

// Dtbmv ...
func (i *Implementation) Dtbmv(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, k int, a []float64, lda int, x []float64, incX int) {
	gonumImpl.Dtbmv(ul, tA, d, n, k, a, lda, x, incX)

}

// Dtpmv ...
func (i *Implementation) Dtpmv(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, ap []float64, x []float64, incX int) {
	gonumImpl.Dtpmv(ul, tA, d, n, ap, x, incX)

}

// Dtrsv ...
func (i *Implementation) Dtrsv(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, a []float64, lda int, x []float64, incX int) {
	gonumImpl.Dtrsv(ul, tA, d, n, a, lda, x, incX)

}

// Dtbsv ...
func (i *Implementation) Dtbsv(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, k int, a []float64, lda int, x []float64, incX int) {
	gonumImpl.Dtbsv(ul, tA, d, n, k, a, lda, x, incX)

}

// Dtpsv ...
func (i *Implementation) Dtpsv(ul blas.Uplo, tA blas.Transpose, d blas.Diag, n int, ap []float64, x []float64, incX int) {
	gonumImpl.Dtpsv(ul, tA, d, n, ap, x, incX)

}

// Dsymv ...
func (i *Implementation) Dsymv(ul blas.Uplo, n int, alpha float64, a []float64, lda int, x []float64, incX int, beta float64, y []float64, incY int) {
	gonumImpl.Dsymv(ul, n, alpha, a, lda, x, incX, beta, y, incY)

}

// Dsbmv ...
func (i *Implementation) Dsbmv(ul blas.Uplo, n int, k int, alpha float64, a []float64, lda int, x []float64, incX int, beta float64, y []float64, incY int) {
	gonumImpl.Dsbmv(ul, n, k, alpha, a, lda, x, incX, beta, y, incY)

}

// Dspmv ...
func (i *Implementation) Dspmv(ul blas.Uplo, n int, alpha float64, ap []float64, x []float64, incX int, beta float64, y []float64, incY int) {
	gonumImpl.Dspmv(ul, n, alpha, ap, x, incX, beta, y, incY)

}

// Dger ...
func (i *Implementation) Dger(m int, n int, alpha float64, x []float64, incX int, y []float64, incY int, a []float64, lda int) {
	gonumImpl.Dger(m, n, alpha, x, incX, y, incY, a, lda)

}

// Dsyr ...
func (i *Implementation) Dsyr(ul blas.Uplo, n int, alpha float64, x []float64, incX int, a []float64, lda int) {
	gonumImpl.Dsyr(ul, n, alpha, x, incX, a, lda)

}

// Dspr ...
func (i *Implementation) Dspr(ul blas.Uplo, n int, alpha float64, x []float64, incX int, ap []float64) {
	gonumImpl.Dspr(ul, n, alpha, x, incX, ap)

}

// Dsyr2 ...
func (i *Implementation) Dsyr2(ul blas.Uplo, n int, alpha float64, x []float64, incX int, y []float64, incY int, a []float64, lda int) {
	gonumImpl.Dsyr2(ul, n, alpha, x, incX, y, incY, a, lda)

}

// Dspr2 ...
func (i *Implementation) Dspr2(ul blas.Uplo, n int, alpha float64, x []float64, incX int, y []float64, incY int, a []float64) {
	gonumImpl.Dspr2(ul, n, alpha, x, incX, y, incY, a)

}

// Dgemm ...
func (i *Implementation) Dgemm(tA blas.Transpose, tB blas.Transpose, m int, n int, k int, alpha float64, a []float64, lda int, b []float64, ldb int, beta float64, c []float64, ldc int) {
	gonumImpl.Dgemm(tA, tB, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc)

}

// Dsymm ...
func (i *Implementation) Dsymm(s blas.Side, ul blas.Uplo, m int, n int, alpha float64, a []float64, lda int, b []float64, ldb int, beta float64, c []float64, ldc int) {
	gonumImpl.Dsymm(s, ul, m, n, alpha, a, lda, b, ldb, beta, c, ldc)

}

// Dsyrk ...
func (i *Implementation) Dsyrk(ul blas.Uplo, t blas.Transpose, n int, k int, alpha float64, a []float64, lda int, beta float64, c []float64, ldc int) {
	gonumImpl.Dsyrk(ul, t, n, k, alpha, a, lda, beta, c, ldc)

}

// Dsyr2k ...
func (i *Implementation) Dsyr2k(ul blas.Uplo, t blas.Transpose, n int, k int, alpha float64, a []float64, lda int, b []float64, ldb int, beta float64, c []float64, ldc int) {
	gonumImpl.Dsyr2k(ul, t, n, k, alpha, a, lda, b, ldb, beta, c, ldc)

}

// Dtrmm ...
func (i *Implementation) Dtrmm(s blas.Side, ul blas.Uplo, tA blas.Transpose, d blas.Diag, m int, n int, alpha float64, a []float64, lda int, b []float64, ldb int) {
	gonumImpl.Dtrmm(s, ul, tA, d, m, n, alpha, a, lda, b, ldb)

}

// Dtrsm ...
func (i *Implementation) Dtrsm(s blas.Side, ul blas.Uplo, tA blas.Transpose, d blas.Diag, m int, n int, alpha float64, a []float64, lda int, b []float64, ldb int) {
	gonumImpl.Dtrsm(s, ul, tA, d, m, n, alpha, a, lda, b, ldb)

}
